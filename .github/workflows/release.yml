name: Release

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore:') && !contains(github.event.head_commit.message, 'docs:') && !contains(github.event.head_commit.message, 'chore: release')"

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.RELEASE_TOKEN }}
        
    - name: Debug Info
      run: |
        echo "Current tags:"
        git tag -l
        echo "Current npm versions:"
        npm view pg-boss-dashboard versions || echo "Package not found in npm"
        
    - name: Git config
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Fetch all tags
      run: git fetch --tags origin

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: npm ci

    - name: Install UI dependencies
      working-directory: ./package/ui
      run: npm ci

    - name: Install API dependencies
      working-directory: ./package/api
      run: npm ci

    - name: Determine Next Version
      id: version
      run: |
        NEXT_VERSION=$(npm run release -- --dry-run | grep "Release v" | sed -E 's/.*Release v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
        echo "Next version will be: ${NEXT_VERSION}"
        echo "next_version=${NEXT_VERSION}" >> $GITHUB_OUTPUT

    - name: Clean Existing Release
      run: |
        VERSION=${{ steps.version.outputs.next_version }}
        echo "Cleaning version v${VERSION}"
        
        # Delete local tag if exists
        git tag -d "v${VERSION}" 2>/dev/null || true
        
        # Delete remote tag if exists
        git push origin ":refs/tags/v${VERSION}" 2>/dev/null || true
        
        # Delete GitHub release if exists
        curl -X DELETE \
          -H "Authorization: token ${{ secrets.RELEASE_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${VERSION}" \
          2>/dev/null || true
        
        # Unpublish from npm if exists
        npm unpublish "pg-boss-dashboard@${VERSION}" 2>/dev/null || true
        
        echo "Cleanup completed"

    - name: Release
      id: release
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        VERSION=${{ steps.version.outputs.next_version }}
        # Run release with verbose logging
        set -x
        npm run release -- --ci \
          --git.requireUpstream=false \
          --git.commitMessage="chore: release v${VERSION}" \
          --git.tagName="v${VERSION}" \
          --github.release=true \
          --no-git.requireCleanWorkingDir \
          --verbose

    - name: Verify Release
      if: success()
      run: |
        VERSION=${{ steps.version.outputs.next_version }}
        echo "Verifying release v${VERSION}"
        
        # Check git tag
        git tag -l "v${VERSION}"
        
        # Check npm
        npm view pg-boss-dashboard versions
        
        # Check GitHub release
        curl -H "Authorization: token ${{ secrets.RELEASE_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${VERSION}"

    - name: Rollback on failure
      if: failure()
      run: |
        VERSION=${{ steps.version.outputs.next_version }}
        echo "Rolling back version v${VERSION}"
        
        # Delete tags
        git tag -d "v${VERSION}" 2>/dev/null || true
        git push origin ":refs/tags/v${VERSION}" 2>/dev/null || true
        
        # Delete GitHub release
        curl -X DELETE \
          -H "Authorization: token ${{ secrets.RELEASE_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${VERSION}" \
          2>/dev/null || true
        
        # Unpublish from npm
        npm unpublish "pg-boss-dashboard@${VERSION}" 2>/dev/null || true
        
        echo "Rollback completed"